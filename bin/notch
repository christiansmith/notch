#!/usr/bin/env node

/**
 * Module dependencies
 */

var nopt = require('nopt')
  , path = require('path')
  , Client = require('../lib/client')
  , Env = require('../lib/env');

/**
 * Parse options and de(re)structure
 */

var commands = [ 'help'
               //, 'init'
               , 'push'
               , 'publish'
               , 'fetch'
               , 'retract' 
               ]
  , types =    { 'directory': path
               , 'skeleton': String
               , 'target': String 
               , 'file': path
               , 'help': Boolean
               , 'version': Boolean
               }
  , aliases =  { 'd': ['--directory']
               , 's': ['--skeleton']
               , 't': ['--target'] 
               , 'f': ['--file']
               , 'h': ['--help']
               , 'v': ['--version']
               }
  , options = nopt(types, aliases)
  , argv = options.argv
  , arguments = argv.remain;

/**
 * Remove clutter from options, then append
 * options to arguments.
 */

delete options.argv;
arguments.push(options);

/**
 * Use the first argument as a command
 * if it is a member of `commands`.
 */

if (commands.indexOf(arguments[0]) !== -1) {
  var command = arguments.shift();  
}

/**
 * Initialize the environment
 */

var env, client;

(!command || command == 'init')
  ? env = new Env()
  : env = new Env('config.json'); // can we add an option for this?

client = new Client(env);

/**
 * Execute the command
 */

(command && !options.help)
  ? client[command].apply(client, arguments)
  : client.info(command, options); 


/**
  case 'draft':
    // ask user to use defaults? 
    // if no, go through defaults/required and get values from prompt
    var file = args.shift()
      , schema = { properties: { foo: { type: 'string', default: 'bar' }}}
      , doc = notch.Doc.spawn(schema);
      doc.write(file);
    break;

*/
